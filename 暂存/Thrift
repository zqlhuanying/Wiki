public class PreApprovalServiceHelper {

  // 封装返回的结果
	public static class preApprovalVerify_result  implements java.io.Serializable {

		private static final long serialVersionUID = 1L;

		/**
		*/
		@tag(0)
		@optional
		private com.vip.xfd.fraud.service.PreApprovalVerifyResponse success;

		public com.vip.xfd.fraud.service.PreApprovalVerifyResponse getSuccess(){
			return this.success;
		}

		public void setSuccess(com.vip.xfd.fraud.service.PreApprovalVerifyResponse value){
			this.success = value;
		}

	}

	// 封装请求的参数
	public static class preApprovalVerify_args  implements java.io.Serializable {

		private static final long serialVersionUID = 1L;

		/**
		* 预授信卡信息筛选
		*/
		@tag(1)
		@required
		private com.vip.xfd.fraud.service.PreApprovalVerifyRequest request;

		public com.vip.xfd.fraud.service.PreApprovalVerifyRequest getRequest(){
			return this.request;
		}

		public void setRequest(com.vip.xfd.fraud.service.PreApprovalVerifyRequest value){
			this.request = value;
		}

	}

	public static class preApprovalVerify_resultHelper implements TBaseWrapper < preApprovalVerify_result, preApprovalVerify_resultHelper._Fields >
	{

		public static final preApprovalVerify_resultHelper OBJ = new preApprovalVerify_resultHelper();

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("preApprovalVerify_result");

		private static final TFieldDescriptor SUCCESS_FIELD_DESC = new TFieldDescriptor("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0, true);

		private static final TFieldDescriptor[] fieldDescriptors = {
			SUCCESS_FIELD_DESC
		};
		public TFieldDescriptor[] getFieldDescriptors() {

			return fieldDescriptors;
		}

		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{
			SUCCESS(SUCCESS_FIELD_DESC) ;
			private static final Map < String, _Fields > byName = new HashMap<String, _Fields>();
			private static final Map < Short, _Fields > byId = new HashMap<Short, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
					byId.put(field.getThriftFieldId(), field);
				}
			}

			public static _Fields findByThriftId(int fieldId) {
				return byId.get(fieldId);
			}

			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private TFieldDescriptor fieldDescriptor;
			_Fields(TFieldDescriptor fieldDescriptor) {
				this.fieldDescriptor = fieldDescriptor;
			}

			public short getThriftFieldId() {
				return fieldDescriptor.id;
			}

			public String getFieldName() {
				return fieldDescriptor.name;
			}
		}


		public static preApprovalVerify_resultHelper getInstance() {
			return OBJ;
		}


		public void read(preApprovalVerify_result struct, org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while(true) {
				schemeField = iprot.readFieldBegin();
				if(schemeField.type == org.apache.thrift.protocol.TType.STOP) break;
				switch(schemeField.id) {
					case 0: {
						if(schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							com.vip.xfd.fraud.service.PreApprovalVerifyResponse value;
							value = new com.vip.xfd.fraud.service.PreApprovalVerifyResponse();
							com.vip.xfd.fraud.service.PreApprovalVerifyResponseHelper.getInstance().read(value, iprot);
							struct.setSuccess(value);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					}
					default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();
			validate(struct);
		}

		public void write(preApprovalVerify_result struct, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			validate(struct);
			oprot.writeStructBegin(STRUCT_DESC);
			if(struct.getSuccess() != null) {
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				com.vip.xfd.fraud.service.PreApprovalVerifyResponseHelper.getInstance().write(struct.getSuccess(), oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

		public _Fields fieldForId(short fieldId) {

			return _Fields.findByThriftId(fieldId);
		}


		public boolean isSet(preApprovalVerify_result bean, _Fields field) {

			if(field == null) throw new IllegalArgumentException();

			switch(field){

				case SUCCESS: return bean.getSuccess() != null;

			}

			throw new IllegalStateException();
		}


		public Object getFieldValue(preApprovalVerify_result bean, _Fields field) {

			switch(field){

				case SUCCESS: return bean.getSuccess();

			}

			throw new IllegalStateException();
		}


		public void setFieldValue(preApprovalVerify_result bean, _Fields field, Object value) {

			switch(field) {

				case SUCCESS:
				bean.setSuccess((com.vip.xfd.fraud.service.PreApprovalVerifyResponse)value);
				break;


			}

		}


		public void validate(preApprovalVerify_result bean) throws TException {
		}


		public org.apache.thrift.TFieldIdEnum[] getFields() {
			return _Fields.values();
		}
	}

	public static class preApprovalVerify_argsHelper implements TBaseWrapper < preApprovalVerify_args, preApprovalVerify_argsHelper._Fields >
	{

		public static final preApprovalVerify_argsHelper OBJ = new preApprovalVerify_argsHelper();

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("preApprovalVerify_args");

		private static final TFieldDescriptor REQUEST_FIELD_DESC = new TFieldDescriptor("request", org.apache.thrift.protocol.TType.STRUCT, (short) 1, false);

		private static final TFieldDescriptor[] fieldDescriptors = {

			REQUEST_FIELD_DESC
		}
		;
		public TFieldDescriptor[] getFieldDescriptors() {

			return fieldDescriptors;
		}


		public enum _Fields implements org.apache.thrift.TFieldIdEnum
		{

			REQUEST(REQUEST_FIELD_DESC)
			;
			private static final Map < String, _Fields > byName = new HashMap<String, _Fields>();
			private static final Map < Short, _Fields > byId = new HashMap<Short, _Fields>();

			static {

				for (_Fields field : EnumSet.allOf(_Fields.class)) {

					byName.put(field.getFieldName(), field);
					byId.put(field.getThriftFieldId(), field);
				}

			}


			public static _Fields findByThriftId(int fieldId) {

				return byId.get(fieldId);
			}


			public static _Fields findByName(String name) {

				return byName.get(name);
			}


			private TFieldDescriptor fieldDescriptor;
			_Fields(TFieldDescriptor fieldDescriptor) {

				this.fieldDescriptor = fieldDescriptor;
			}


			public short getThriftFieldId() {

				return fieldDescriptor.id;
			}


			public String getFieldName() {

				return fieldDescriptor.name;
			}


		}


		public static preApprovalVerify_argsHelper getInstance() {

			return OBJ;
		}


		public void read(preApprovalVerify_args struct, org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {

			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while(true) {

				schemeField = iprot.readFieldBegin();
				if(schemeField.type == org.apache.thrift.protocol.TType.STOP) break;
				switch(schemeField.id) {


					case 1: {

						if(schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {

							com.vip.xfd.fraud.service.PreApprovalVerifyRequest value;

							value = new com.vip.xfd.fraud.service.PreApprovalVerifyRequest();
							com.vip.xfd.fraud.service.PreApprovalVerifyRequestHelper.getInstance().read(value, iprot);

							struct.setRequest(value);
						}

						else {

							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}

						break;
					}


					default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}

				iprot.readFieldEnd();
			}

			iprot.readStructEnd();

			validate(struct);
		}


		public void write(preApprovalVerify_args struct, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {

			validate(struct);
			oprot.writeStructBegin(STRUCT_DESC);

			oprot.writeFieldBegin(REQUEST_FIELD_DESC);

			com.vip.xfd.fraud.service.PreApprovalVerifyRequestHelper.getInstance().write(struct.getRequest(), oprot);

			oprot.writeFieldEnd();

			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}


		public _Fields fieldForId(short fieldId) {

			return _Fields.findByThriftId(fieldId);
		}


		public boolean isSet(preApprovalVerify_args bean, _Fields field) {

			if(field == null) throw new IllegalArgumentException();

			switch(field){

				case REQUEST: return bean.getRequest() != null;

			}

			throw new IllegalStateException();
		}


		public Object getFieldValue(preApprovalVerify_args bean, _Fields field) {

			switch(field){

				case REQUEST: return bean.getRequest();

			}

			throw new IllegalStateException();
		}


		public void setFieldValue(preApprovalVerify_args bean, _Fields field, Object value) {

			switch(field) {

				case REQUEST:
				bean.setRequest((com.vip.xfd.fraud.service.PreApprovalVerifyRequest)value);
				break;


			}

		}


		public void validate(preApprovalVerify_args bean) throws TException {

			if(bean.getRequest() == null) throw new org.apache.thrift.protocol.TProtocolException("required field request is not set");

		}


		public org.apache.thrift.TFieldIdEnum[] getFields() {
			return _Fields.values();
		}
	}

	public static class preApprovalVerify_Dispatcher < I extends PreApprovalService> extends MethodDispatcher<I,
	preApprovalVerify_args, preApprovalVerify_argsHelper,
	preApprovalVerify_result, preApprovalVerify_resultHelper > {

		public preApprovalVerify_Dispatcher() {
			super("preApprovalVerify", preApprovalVerify_argsHelper.getInstance(), preApprovalVerify_resultHelper.getInstance());
		}

		public preApprovalVerify_args getEmptyArgsInstance() {
			return new preApprovalVerify_args();
		}

		protected boolean isOneway() {
			return false;
		}

		public preApprovalVerify_result getResult(I iface, preApprovalVerify_args args)  throws Throwable{
			preApprovalVerify_result result = new preApprovalVerify_result();
			TransactionContext tc = TransactionContext.Factory.getInstance();
			try{
				result.setSuccess( iface.preApprovalVerify(args.getRequest()) );
				tc.setReturnCode("0");
			}
			catch(OspException ex){
				tc.setReturnCode(ex.getReturnCode());
				tc.setReturnMessage(ex.getReturnMessage());
				throw ex;
			}
			catch(Throwable ex){
				tc.setReturnCode(OspException.CALLEE_UNKNOWN_EXCEPTION);
				tc.setReturnMessage(ex.toString());
				throw ex;
			}
			return result;
		}
	}

	public static interface PreApprovalServiceStub extends PreApprovalService{
		public void asyncHealthCheck(final OspAsyncCallback<com.vip.hermes.core.health.CheckResult> ospAsyncCallback) throws OspException;
		public void asyncPreApprovalVerify(com.vip.xfd.fraud.service.PreApprovalVerifyRequest request,final OspAsyncCallback<com.vip.xfd.fraud.service.PreApprovalVerifyResponse> ospAsyncCallback) throws OspException;
	}

	public static class PreApprovalServiceClient extends OspServiceStub implements PreApprovalServiceStub {
		private final static Logger logger = LoggerFactory.getLogger(PreApprovalServiceClient.class);

		public PreApprovalServiceClient() {

			super("1.0.0", com.vip.xfd.fraud.service.PreApprovalService.class, "com.vip.xfd.fraud.service.PreApprovalService");
		}

		public String getDomain() {
			return "osp-crs.api.vip.com";
		}

		private void send_preApprovalVerify(com.vip.xfd.fraud.service.PreApprovalVerifyRequest request) throws OspException {

			initInvocation("preApprovalVerify");
			preApprovalVerify_args args = new preApprovalVerify_args();
			args.setRequest(request);

			sendBase(args, preApprovalVerify_argsHelper.getInstance());
		}


		private com.vip.xfd.fraud.service.PreApprovalVerifyResponse recv_preApprovalVerify() throws OspException {

			preApprovalVerify_result result = new preApprovalVerify_result();
			receiveBase(result, preApprovalVerify_resultHelper.getInstance());
			return result.getSuccess();

		}


		public void asyncPreApprovalVerify(com.vip.xfd.fraud.service.PreApprovalVerifyRequest request,final OspAsyncCallback<com.vip.xfd.fraud.service.PreApprovalVerifyResponse> ospAsyncCallback) throws OspException {

			if(ospAsyncCallback == null){

				throw new OspException("IllegalArgument", "ospAsyncCallback is null");
			}

			ConnectionCallback connectionCallback = new ConnectionCallback(){

				@Override
				public void sentComplete(Channel channel, int sequence){
				}

				@Override
				public void onTimeout(int sequence) {

					try {

						ospAsyncCallback.onTimeout();
					}
					catch (Exception e) {

						logger.error(e.getMessage(), e);
					}

				}

				@Override
				public void onReceivedPacket(int sequence, ByteBuf packet) {

					com.vip.xfd.fraud.service.PreApprovalVerifyResponse result = null;
					try {

						((InvocationInfoImpl)InvocationContext.Factory.getInstance().getLastInvocation()).setResponseByteBuf(packet);
						result = recv_preApprovalVerify();

						try {

							ospAsyncCallback.onSuccess(result);
						}
						catch (Exception e) {

							logger.error(e.getMessage(), e);
						}

					}
					catch (OspException e) {

						ospAsyncCallback.onError(e);
					}
					catch (Exception e) {

						try {

							ospAsyncCallback.onError(new OspException(OspSysErrorCode.OSP_CALLER_UNKNOWN_EXCEPTION, e.getClass() + " " + e.getMessage()));
						}
						catch (OspException e1) {

							logger.error(e1.getMessage(), e);
						}

					}

				}

			}
			;
			try {

				asyncSend_preApprovalVerify(request,connectionCallback);
			}
			catch (OspException e) {

				ospAsyncCallback.onError(e);
			}
			catch (Exception e) {

				try {

					ospAsyncCallback.onError(new OspException(OspSysErrorCode.OSP_CALLER_UNKNOWN_EXCEPTION, e.getClass() + " " + e.getMessage()));
				}
				catch (OspException e1) {

					logger.error(e1.getMessage(), e);
				}

			}

		}


		private void asyncSend_preApprovalVerify(com.vip.xfd.fraud.service.PreApprovalVerifyRequest request,ConnectionCallback callback) throws OspException {

			initInvocation("preApprovalVerify");
			preApprovalVerify_args args = new preApprovalVerify_args();
			args.setRequest(request);

			asyncSendBase(args, preApprovalVerify_argsHelper.getInstance(), callback);
		}


	}



	@SuppressWarnings("rawtypes")
	public static class Processor <I extends PreApprovalService> extends OspProcessor<I> implements
	org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
		public Processor(I iface) {
			super(iface, getProcessMap(new HashMap<String, MethodDispatcher>()));
		}
		private static Map<String, MethodDispatcher> getProcessMap(Map<String, MethodDispatcher> processMap) {
			processMap.put("healthCheck", new healthCheck_Dispatcher());
			processMap.put("preApprovalVerify", new preApprovalVerify_Dispatcher());
			processMap.put("getServiceDescriptor", new getServiceDescriptor_Dispatcher());
			return processMap;
		}
		public String getDomain(){
			return "osp-crs.api.vip.com";
		}
	}
}
